#!/usr/bin/perl
use 5.030 ; use strict ; use warnings ; 
use Getopt::Std ;
use Getopt::Long qw [ GetOptions :config bundling no_ignore_case pass_through ] ; # GetOptionsFromArray ] ;
use Time::HiRes qw[ gettimeofday tv_interval sleep ] ; # Perl 5.7.3からコアモジュール
use Term::ANSIColor qw[ color :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use FindBin qw[ $Script $Bin ] ; 
use lib "$FindBin::Bin/lib" ; 
use App::ggdrv::start01 ; # GCPでAPIを設定する方法を、読む人に説明する文書を表示する。
use App::ggdrv::start02 ; # 設定ファイルの書き込み方を説明する。自動実行の機能も提供。
use App::ggdrv::tokens  ; # トークン2個を設定する。表示も可能。
use App::ggdrv::fsearch ; 
## 計算秒数などについての処理
my $time_start = [ gettimeofday ] ; 
END{ ## 終了する段階で、二次情報を表示する
  use POSIX qw [ strftime ] ; 
  my $dt1000 = sub { my $t = [ gettimeofday ] ; strftime( "%Y-%m-%d %H:%M:%S." . sprintf("%03d", $t->[1] / 1e3 ) , localtime( $t->[0] ) ) } ;
  my $sec = sprintf "PT %0.3f S", tv_interval ( $time_start ) ; 
  say STDERR  BOLD FAINT "-- " , $dt1000->() , "  calculation time: ", $sec,  "  ($Script \$\$=$$)"; 
}

## 主要部はここから。

GetOptions ( next => \my$next , run => \my$run ) ; 
do{ & App::ggdrv::start02::show_setup_proc( $run ) ; exit } if $next ;

GetOptions ( tokens => \my$tokens , get => \my$get , try => \my$try , atoken => \my$atoken) ; 
$tokens = 1 if $atoken  ; # --token が無くても、--atokenが指定されたら、指定されたことにする。
do{ & App::ggdrv::tokens::tokens( $get , $try , $atoken) ; exit } if $tokens ;

GetOptions ( fsearch => \my$fsearch , pages => \my$pages ) ; 
do{ & App::ggdrv::fsearch::fsearch () ; exit } if $fsearch  ;

& App::ggdrv::start01::show_setup_proc() and exit if @ARGV == 0 ; # 最後に実行すべし?? オプションのせいで@ARGV==0はあり得る。



## ヘルプの扱い
sub VERSION_MESSAGE {}
sub HELP_MESSAGE{
    use FindBin qw[ $Script ] ; 
    $ARGV[1] //= '' ;
    open my $FH , '<' , $0 ;
    while(<$FH>){
        s/\$0/$Script/g ;
        print $_ if $ARGV[1] eq 'opt' ? m/^\ +\-/ : s/^=head1// .. s/^=cut// ;
    }
    close $FH ;
    exit 0 ;
}

# 数を3桁区切りに変換する。
sub d3 ($) { $_[0] =~ s/(?<=\d)(?=(\d\d\d)+($|\D))/,/gr } ; 

=encoding utf8 

=head1

 ggdrv 

  サブコマンド方式で、様々な関連する機能を実行可能としている。
  OAuthの仕組みでGoogleドライブにファイルを自動更新で同期する機能を提供する。


 オプション : 

 利用例 : 

   ggdrv   # 引数無しで実行すると、最初のセットアップの仕方(ブラウザ越しで「クライアントシークレット」を作る方法)が表示される。
   ggdrv --next  # クライアントシークレットなどを、設定ファイルに書き込む方法が表示される。
   ggdrv --next --run  # 表示される内容を実際に実行する。
   ggdrv --tokens  #  トークンの情報2個を単に表示する。(リフレッシュトークン(使わないと半年で無効化)とアクセストークンがある。)
   ggdrv --tokens --get   # トークンを取得する(設定ファイルに書き込む)。書き込む前のファイルはバックアップは1回のみ保管。
   ggdrv --tokens --get --try   # トークンを取得するが、設定ファイルには書き込まない。
   ggdrv --atoken        # アクセストークン(使わないと1時間で無効化)のみ更新する。ただし、-try も指定すると設定ファイルに書き込まない。



 環境変数 : export VAR=VALUE で指定。unset VAR で解除が可能。

   GGDRV_API    :  クライアントIDやクライアントシークレットを保管するファイルの名前。未指定なら ~/ggdrv2303v1 である。

 開発メモ:
    
=head1 AUTHOR

下野寿之 Toshiyuki SHIMONO <bin4tsv@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2023 Toshiyuki SHIMONO. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut 
